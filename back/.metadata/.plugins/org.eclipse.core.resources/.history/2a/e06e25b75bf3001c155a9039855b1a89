package com.baemin.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import com.baemin.common.GuestId;
import com.baemin.dto.User;
import com.baemin.login.LoginDetails;

@Aspect
@Component
public class AOP {

	@Around("@annotation(com.baemin.aop.MemberCheck)")
	public Object memberCheck(ProceedingJoinPoint j) throws Throwable   {
		
		Object sessionUser = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		if(sessionUser instanceof LoginDetails) {
			LoginDetails u = (LoginDetails) sessionUser;
			
			System.out.println(u);
		}
		
		
		LoginDetails user = (LoginDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		Object userId = null;
		boolean member = false;
	
		if(user != null) {
			userId = user.getUser().getUserId();
			member = true;
		} else {
			userId = GuestId.getId();
			member = false;
		}
		System.out.println(userId);
		System.out.println(" member : " + member);
		
		Object resultObj = j.proceed(new Object[] {userId, member});
		
		return resultObj;
	}

}
